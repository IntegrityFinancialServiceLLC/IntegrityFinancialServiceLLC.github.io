"use strict";function asyncGeneratorStep(t,e,r,n,o,a,c){try{var i=t[a](c),s=i.value}catch(t){return void r(t)}i.done?e(s):Promise.resolve(s).then(n,o)}function _asyncToGenerator(i){return function(){var t=this,c=arguments;return new Promise(function(e,r){var n=i.apply(t,c);function o(t){asyncGeneratorStep(n,e,r,o,a,"next",t)}function a(t){asyncGeneratorStep(n,e,r,o,a,"throw",t)}o(void 0)})}}jQuery(function(y){var w;document.querySelector("#clickMe").addEventListener("click",r),document.querySelector("#clickMe1").addEventListener("click",r),document.querySelector("#closePopup").addEventListener("click",function(){e.attr("style","margin-right:0px"),t.removeClass("fade-in").addClass("fade-out"),t.attr("style","visibility:hidden"),y("body").css({overflow:"auto"})});var t=y("#popup"),e=y(".popup-inner");function r(){e.attr("style","margin-right:20px"),t.removeClass("fade-out").addClass("fade-in"),t.attr("style","visibility:visible"),y("body").css({overflow:"hidden"}),o()}var n,x={name:"",email:"",phone:"",portfolioSize:""},o=(n=!1,_asyncToGenerator(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(n){t.next=36;break}return n=!0,t.next=4,a({text:"Our book has been requested over NaN times!",style:"text",writer:"bot"});case 4:return t.next=6,a({text:"All we need some information to determine whether this book suits your needs.",style:"text",writer:"bot"});case 6:return t.next=8,a({text:"First of all, what is your name?",style:"form",field:"name",writer:"bot"});case 8:return x.name=t.sent,t.next=11,a({text:x.name,style:"text",writer:"user"});case 11:return t.next=13,a({text:"Great! Nice to meet you ".concat(x.name,"!"),style:"text",writer:"bot"});case 13:return t.next=15,a({text:"Before we go any further, we want you to know we take your data VERY seriously.",style:"text",writer:"bot"});case 15:return t.next=17,a({text:"<a href=".concat("http://integrityfinancialservicellc.com/wp-content/uploads/2015/05/IFS-Privacy-Pledge-and-Notification.pdf",' target="_blank">Here</a> is our privacy policy.'),style:"text",writer:"bot"});case 17:return t.next=19,a({text:"What's a good phone number to reach you at? (We won't spam you; only a one time confirmation)",style:"form",field:"phone",writer:"bot"});case 19:return x.phone=t.sent,t.next=22,a({text:x.phone,style:"text",writer:"user"});case 22:return t.next=24,a({text:"Great! And what is a good email we can send your book to? (Again, we won't spam you)",style:"form",field:"email",writer:"bot"});case 24:return x.email=t.sent,t.next=27,a({text:"".concat(x.email),style:"text",writer:"user"});case 27:return t.next=29,a({text:"Perfect ".concat(x.name,". What would best describe the amount of investable assets you have saved for retirement? (We customize the information we send based on your situation)"),style:"portfolio",writer:"bot"});case 29:return x.portfolioSize=t.sent,t.next=32,a({text:"".concat(x.portfolioSize),style:"text",writer:"user"});case 32:return t.next=34,a({text:"Great ".concat(x.name,", one last thing.  We need to make sure you're a real person!  Solve the captcha below and we'll get that book sent over to you!"),style:"text",writer:"bot"});case 34:return t.next=36,a({text:x.email,style:"captcha",writer:"bot"});case 36:case"end":return t.stop()}},t)})));function a(){return c.apply(this,arguments)}function c(){return(c=_asyncToGenerator(regeneratorRuntime.mark(function t(e){var r,n,o,a,c,i,s,u,l,d,p,m,b,f,h,v,g;return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:y(".row-current").removeClass("row-current"),y("#bot-chat-current").removeAttr("id"),y("#user-chat-current").removeAttr("id"),y("#left-tag-current").removeAttr("id"),y("#right-tag-current").removeAttr("id"),y("#popup-window").append('<div class="row align-items-center chat-row row-current"> \t\t\t\t\t\t<div class="col-md-1 col-xl-2 padding-column"> \t\t\t\t\t\t</div> \t\t\t\t\t\t<div id="left-tag-current" class="col-2 col-sm-1 logo-column"> \t\t\t\t\t\t</div> \t\t\t\t\t\t<div class="col-8 col-sm-10 col-md-8 col-xl-6 content-column"> \t\t\t\t\t\t\t<div id="bot-chat-current" class="chat-bubble bot chat-fade-in"> \t\t\t\t\t\t\t</div> \t\t\t\t\t\t\t<div id="user-chat-current" class="chat-bubble user float-right chat-fade-in"> \t\t\t\t\t\t\t</div> \t\t\t\t\t\t</div> \t\t\t\t\t\t<div id="right-tag-current" class="col-2 col-sm-1 logo-column"> \t\t\t\t\t\t</div> \t\t\t\t\t\t<div class="col-md-1 col-xl-2 padding-column"> \t\t\t\t\t\t</div> \t\t\t\t\t</div>'),"bot"===e.writer?(r=1<y(".chat-row").length?'<img id="bot-logo-current" src="images/IFSLogo.png" class="bot-logo logo-pop-in">':'<img id="bot-logo-current" src="images/IFSLogo.png" class="bot-logo">',y("#right-tag-current").append('<div id="bot-clock-current" class="bot-clock"></div>')):y("#left-tag-current").append('<div id="user-clock-current" class="user-clock"></div>'),s=new Date,s=s.getHours()+":"+s.getMinutes()+":"+s.getSeconds(),"bot"===e.writer?(n=y("#bot-chat-current"),o=y("#bot-clock-current"),c=y("#user-chat-current"),a=y("#user-clock-current"),i='<div class="clock-text bot-clock-text">'+s+"</div>",y(".bot.last").removeClass("last")):(n=y("#user-chat-current"),o=y("#user-clock-current"),c=y("#bot-chat-current"),a=y("#bot-clock-current"),y(".row-current").addClass("height-shift"),i='<div class="clock-text user-clock-text" style="height:100%;max-height:100%">'+s+"</div>",y(".user.last").removeClass("last")),n.addClass("last"),a.remove(),c.remove(),o.append(i),o.removeAttr("id"),t.t0=e.style,t.next="text"===t.t0?19:"form"===t.t0?22:"portfolio"===t.t0?38:"captcha"===t.t0?48:52;break;case 19:return n.append('<p class="chat-text">'.concat(e.text,"</p>")),u=k(1e3),t.abrupt("break",52);case 22:t.t1=e.field,t.next="name"===t.t1?25:"phone"===t.t1?27:"email"===t.t1?29:31;break;case 25:return l="text",t.abrupt("break",31);case 27:return l="tel",t.abrupt("break",31);case 29:return l="email",t.abrupt("break",31);case 31:return n.append('<p class="chat-text">'+e.text+'</p><div class="input-group mb-3"> \t\t\t<input type="'.concat(l,'" id="').concat(e.field,'-input" class="form-control" placeholder="Your ').concat(e.field,'" aria-label="Your ').concat(e.field,'" aria-describedby="').concat(e.field,'-submit">  \n  \t\t\t<div class="input-group-append"> \t\t\t<span class="input-group-text" id="').concat(e.field,'-submit"> ok</span></div></div>')),d=y("#".concat(e.field,"-submit")),w=!0,y("#".concat(e.field,"-input")).on("keypress",function(t){"Enter"===t.key&&d.trigger("click")}),d.on("click",A),u=S("#".concat(e.field,"-input"),function(t){return t.val()}),t.abrupt("break",52);case 38:for(n.append('<p class="chat-text">'+e.text+"</p>"),g=["Less than $100,000 of investable assets saved for retirement","Between $100,000 and $250,000 of investable assets saved for retirement","Between $250,000 and $500,000 of investable assets saved for retirement","Between $500,000 and $1,000,000 of investable assets saved for retirement","Over $1,000,000 of investable assets saved for retirement"],n.append('<div class="portfolio-selection">'),p=y(".portfolio-selection"),m=0,b=g;m<b.length;m++)f=b[m],p.append('<button type="button" class="btn btn-light portfolio-button">'.concat(f,"</button>"));return p.on("click","button",function(){y(this).attr("id","portfolio-size"),A()}),n.append("</div>"),w=!0,u=S("#portfolio-size",function(t){return t.text()}),t.abrupt("break",52);case 48:return n.append('<p class="chat-text">'+e.text+"</p>"),n.append('<button id="submit-button" \n            class="g-recaptcha btn btn-light" \n        data-sitekey="reCAPTCHA_site_key" \n        data-callback="onSubmit" \n        data-action="submit">Submit</button>'),y("#submit-button").on("click",_asyncToGenerator(regeneratorRuntime.mark(function t(){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:grecaptcha.ready(function(){grecaptcha.execute("6Ld4LyQaAAAAAAcJgIAMJQCQ3B-ArchznBkWR7A9",{action:"submit"}).then(function(t){var e=new XMLHttpRequest;e.open("POST","https://us-south.functions.appdomain.cloud/api/v1/web/dwstanley%40integrityfinancialservicellc.com_dev/mysite/contactus",!0),e.setRequestHeader("Content-type","application/x-www-form-urlencoded"),e.onload=function(){return console.log(e.status)},e.send("name=".concat(x.name,"&phone=").concat(x.phone,"&email=").concat(x.email,"&portfolioSize=").concat(x.portfolioSize,"&token=").concat(t))})});case 1:case"end":return t.stop()}},t)}))),t.abrupt("break",52);case 52:return"bot"===e.writer&&(1<y(".content-column").length&&(h=y(".row-current").height()/2+y("#last-bot-row").height()/2,0!==(v=y(".height-shift")).length&&v.each(function(){h+=y(this).height()}),y("#bot-logo-current").velocity({top:h},{duration:400,easing:"easeInQuad",complete:function(t){setTimeout(function(){y(t).css("visibility","hidden").removeAttr("id"),v.removeClass("height-shift")},300)}}),y("#last-bot-row").removeAttr("id"),y("#bot-logo-current").removeAttr("id"),y("bot-logo").last().attr("id","bot-logo-current")),y("#left-tag-current").append(r),y(".row-current").attr("id","last-bot-row")),g=y(".row-current").css("height"),y("#popup-window").css("height","+=".concat(g)),t.next=57,u;case 57:return t.abrupt("return",t.sent);case 58:case"end":return t.stop()}},t)}))).apply(this,arguments)}function k(r){return new Promise(function(t,e){setTimeout(function(){t(null)},r)})}function A(){w=!1}function S(){return i.apply(this,arguments)}function i(){return(i=_asyncToGenerator(regeneratorRuntime.mark(function t(e,r){return regeneratorRuntime.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(w)return t.next=3,k(100);t.next=5;break;case 3:t.next=0;break;case 5:return t.abrupt("return",r(y(e)));case 6:case"end":return t.stop()}},t)}))).apply(this,arguments)}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
