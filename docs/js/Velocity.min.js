"use strict";function _typeof2(e){return(_typeof2="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(e){"object"===("undefined"==typeof exports?"undefined":_typeof2(exports))&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):(void 0).Velocity=e()}(function(){var W="function"==typeof Symbol&&"symbol"===_typeof2(Symbol.iterator)?function(e){return _typeof2(e)}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":_typeof2(e)},e=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t=function(e,t,n){return t&&r(e.prototype,t),n&&r(e,n),e};function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function M(e){return!0===e||!1===e}function V(e){return"[object Function]"===Object.prototype.toString.call(e)}function q(e){return!(!e||!e.nodeType)}function Y(e){return"number"==typeof e}function X(e){if(!e||"object"!==(void 0===e?"undefined":W(e))||e.nodeType||"[object Object]"!==Object.prototype.toString.call(e))return!1;e=Object.getPrototypeOf(e);return!e||e.hasOwnProperty("constructor")&&e.constructor===Object}function K(e){return"string"==typeof e}function $(e){return e&&Y(e.length)&&V(e.velocity)}function N(e){return e&&e!==window&&Y(e.length)&&!K(e)&&!V(e)&&!q(e)&&(0===e.length||q(e[0]))}function P(e){return Array.prototype.slice.call(e,0)}function A(e,t,n,r){e&&Object.defineProperty(e,t,{configurable:!r,writable:!r,value:n})}function L(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var r=!0,i=!1,o=void 0;try{for(var a=t[Symbol.iterator]();!(r=(l=a.next()).done);r=!0){var l=l.value;if(void 0!==l&&l==l)return l}}catch(e){i=!0,o=e}finally{try{!r&&a.return&&a.return()}finally{if(i)throw o}}}var n=Date.now||function(){return(new Date).getTime()};function u(e,t){e instanceof Element&&(e.classList?e.classList.remove(t):e.className=e.className.replace(new RegExp("(^|\\s)"+t+"(\\s|$)","gi")," "))}var J={};function i(e,t){var n,r=e[0],i=e[1];K(r)?V(i)?J[r]&&(n=J,e=r,!Object.prototype.propertyIsEnumerable.call(n,e))?console.warn("VelocityJS: Trying to override internal 'registerAction' callback",r):!0===t?A(J,r,i):J[r]=i:console.warn("VelocityJS: Trying to set 'registerAction' callback to an invalid value:",r,i):console.warn("VelocityJS: Trying to set 'registerAction' name to an invalid value:",r)}i(["registerAction",i],!0);var ee=400,o={fast:200,normal:400,slow:600},h={};function a(e){var t=e[0],e=e[1];K(t)?V(e)?h[t]?console.warn("VelocityJS: Trying to override 'registerEasing' callback",t):h[t]=e:console.warn("VelocityJS: Trying to set 'registerEasing' callback to an invalid value:",t,e):console.warn("VelocityJS: Trying to set 'registerEasing' name to an invalid value:",t)}function z(e,t,n,r){return t+e*(n-t)}function w(e){return Math.min(Math.max(e,0),1)}function l(e,t){return 1-3*t+3*e}function s(e,t){return 3*t-6*e}function b(e,t,n){return((l(t,n)*e+s(t,n))*e+3*t)*e}function S(e,t,n){return 3*l(t,n)*e*e+2*s(t,n)*e+3*t}function c(){for(var a=4,l=1e-7,s=10,u=11,c=1/(u-1),e=("Float32Array"in window),t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];if(4===n.length){for(var i=0;i<4;++i)if("number"!=typeof n[i]||isNaN(n[i])||!isFinite(n[i]))return;var f=w(n[0]),o=n[1],d=w(n[2]),v=n[3],p=new(e?Float32Array:Array)(u),y=!1,g="generateBezier("+[f,o,d,v]+")",e=function(e,t,n,r){return y||m(),0===e?t:1===e?n:f===o&&d===v?t+e*(n-t):t+b(h(e),o,v)*(n-t)};return e.getControlPoints=function(){return[{x:f,y:o},{x:d,y:v}]},e.toString=function(){return g},e}function h(e){for(var t=u-1,n=0,r=1;r!==t&&p[r]<=e;++r)n+=c;var i=n+(e-p[--r])/(p[r+1]-p[r])*c,o=S(i,f,d);return.001<=o?function(e,t){for(var n=0;n<a;++n){var r=S(t,f,d);if(0===r)return t;t-=(b(t,f,d)-e)/r}return t}(e,i):0===o?i:function(e,t,n){for(var r,i=void 0,o=0;0<(r=b(i=t+(n-t)/2,f,d)-e)?n=i:t=i,Math.abs(r)>l&&++o<s;);return i}(e,n,n+c)}function m(){y=!0,f===o&&d===v||function(){for(var e=0;e<u;++e)p[e]=b(e*c,f,d)}()}}i(["registerEasing",a],!0),a(["linear",z]),a(["swing",function(e,t,n){return t+(.5-Math.cos(e*Math.PI)/2)*(n-t)}]),a(["spring",function(e,t,n){return t+(1-Math.cos(4.5*e*Math.PI)*Math.exp(6*-e))*(n-t)}]);var f=c(.42,0,1,1),d=c(0,0,.58,1),v=c(.42,0,.58,1);function y(e){return-e.tension*e.x-e.friction*e.v}function g(e,t,n){e={x:e.x+n.dx*t,v:e.v+n.dv*t,tension:e.tension,friction:e.friction};return{dx:e.v,dv:y(e)}}function m(e,t,n){for(var r,i,o,a,l,s,u,c={x:-1,v:0,tension:parseFloat(e)||500,friction:parseFloat(t)||20},f=[0],t=null!=n,d=0,v=void 0,p=void 0,v=t?(d=m(c.tension,c.friction))/n*.016:.016;i=v,s=u=s=l=a=o=void 0,o={dx:(r=p||c).v,dv:y(r)},a=g(r,.5*i,o),l=g(r,.5*i,a),s=g(r,i,l),u=1/6*(o.dx+2*(a.dx+l.dx)+s.dx),s=1/6*(o.dv+2*(a.dv+l.dv)+s.dv),r.x=r.x+u*i,r.v=r.v+s*i,p=r,f.push(1+p.x),d+=16,1e-4<Math.abs(p.x)&&1e-4<Math.abs(p.v););return t?function(e,t,n){return 0===e?t:1===e?n:t+f[Math.floor(e*(f.length-1))]*(n-t)}:d}a(["ease",c(.25,.1,.25,1)]),a(["easeIn",f]),a(["ease-in",f]),a(["easeOut",d]),a(["ease-out",d]),a(["easeInOut",v]),a(["ease-in-out",v]),a(["easeInSine",c(.47,0,.745,.715)]),a(["easeOutSine",c(.39,.575,.565,1)]),a(["easeInOutSine",c(.445,.05,.55,.95)]),a(["easeInQuad",c(.55,.085,.68,.53)]),a(["easeOutQuad",c(.25,.46,.45,.94)]),a(["easeInOutQuad",c(.455,.03,.515,.955)]),a(["easeInCubic",c(.55,.055,.675,.19)]),a(["easeOutCubic",c(.215,.61,.355,1)]),a(["easeInOutCubic",c(.645,.045,.355,1)]),a(["easeInQuart",c(.895,.03,.685,.22)]),a(["easeOutQuart",c(.165,.84,.44,1)]),a(["easeInOutQuart",c(.77,0,.175,1)]),a(["easeInQuint",c(.755,.05,.855,.06)]),a(["easeOutQuint",c(.23,1,.32,1)]),a(["easeInOutQuint",c(.86,0,.07,1)]),a(["easeInExpo",c(.95,.05,.795,.035)]),a(["easeOutExpo",c(.19,1,.22,1)]),a(["easeInOutExpo",c(1,0,0,1)]),a(["easeInCirc",c(.6,.04,.98,.335)]),a(["easeOutCirc",c(.075,.82,.165,1)]),a(["easeInOutCirc",c(.785,.135,.15,.86)]);var p={};function x(e,t){return Y(e)?e:K(e)?o[e.toLowerCase()]||parseFloat(e.replace("ms","").replace("s","000")):null==t?void 0:x(t)}function O(e){if(M(e))return e;null!=e&&console.warn("VelocityJS: Trying to set 'cache' to an invalid value:",e)}function I(e){if(V(e))return e;null!=e&&console.warn("VelocityJS: Trying to set 'begin' to an invalid value:",e)}function j(e,t){if(V(e))return e;null==e||t||console.warn("VelocityJS: Trying to set 'complete' to an invalid value:",e)}function C(e){var t=x(e);if(!isNaN(t))return t;null!=e&&console.error("VelocityJS: Trying to set 'delay' to an invalid value:",e)}function te(e,t){var n=x(e);if(!isNaN(n)&&0<=n)return n;null==e||t||console.error("VelocityJS: Trying to set 'duration' to an invalid value:",e)}function ne(e,t,n){if(K(e))return h[e];if(V(e))return e;if(Array.isArray(e)){if(1===e.length)return r=e[0],p[r]||(p[r]=function(e,t,n){return 0===e?t:1===e?n:t+Math.round(e*r)*(1/r)*(n-t)});if(2===e.length)return m(e[0],e[1],t);if(4===e.length)return c.apply(null,e)||!1}var r;null==e||n||console.error("VelocityJS: Trying to set 'easing' to an invalid value:",e)}function E(e){if(!1===e)return 0;var t=parseInt(e,10);if(!isNaN(t)&&0<=t)return Math.min(t,60);null!=e&&console.warn("VelocityJS: Trying to set 'fpsLimit' to an invalid value:",e)}function F(e){switch(e){case!1:return 0;case!0:return!0;default:var t=parseInt(e,10);if(!isNaN(t)&&0<=t)return t}null!=e&&console.warn("VelocityJS: Trying to set 'loop' to an invalid value:",e)}function H(e,t){if(!1===e||K(e))return e;null==e||t||console.warn("VelocityJS: Trying to set 'queue' to an invalid value:",e)}function R(e){switch(e){case!1:return 0;case!0:return!0;default:var t=parseInt(e,10);if(!isNaN(t)&&0<=t)return t}null!=e&&console.warn("VelocityJS: Trying to set 'repeat' to an invalid value:",e)}function B(e){if(Y(e))return e;null!=e&&console.error("VelocityJS: Trying to set 'speed' to an invalid value:",e)}function G(e){if(M(e))return e;null!=e&&console.error("VelocityJS: Trying to set 'sync' to an invalid value:",e)}var k=void 0,_=void 0,T=void 0,Q=void 0,D=void 0,U=void 0,Z=void 0,re=void 0,ie=void 0,oe=void 0,ae=void 0,le=void 0,se=void 0,ue=void 0,ce=void 0,fe=void 0,de=(t(ve,null,[{key:"reset",value:function(){k=!0,T=_=void 0,Q=0,U=ne("swing",D=ee),oe=980/(Z=60),le=ae=!(re=0),se="",ce=1,fe=!(ue=0)}},{key:"cache",get:function(){return k},set:function(e){void 0!==(e=O(e))&&(k=e)}},{key:"begin",get:function(){return _},set:function(e){void 0!==(e=I(e))&&(_=e)}},{key:"complete",get:function(){return T},set:function(e){void 0!==(e=j(e))&&(T=e)}},{key:"delay",get:function(){return Q},set:function(e){void 0!==(e=C(e))&&(Q=e)}},{key:"duration",get:function(){return D},set:function(e){void 0!==(e=te(e))&&(D=e)}},{key:"easing",get:function(){return U},set:function(e){void 0!==(e=ne(e,D))&&(U=e)}},{key:"fpsLimit",get:function(){return Z},set:function(e){void 0!==(e=E(e))&&(oe=980/(Z=e))}},{key:"loop",get:function(){return re},set:function(e){void 0!==(e=F(e))&&(re=e)}},{key:"mobileHA",get:function(){return ie},set:function(e){M(e)&&(ie=e)}},{key:"minFrameTime",get:function(){return oe}},{key:"promise",get:function(){return ae},set:function(e){void 0!==(e=function(e){if(M(e))return e;null!=e&&console.warn("VelocityJS: Trying to set 'promise' to an invalid value:",e)}(e))&&(ae=e)}},{key:"promiseRejectEmpty",get:function(){return le},set:function(e){void 0!==(e=function(e){if(M(e))return e;null!=e&&console.warn("VelocityJS: Trying to set 'promiseRejectEmpty' to an invalid value:",e)}(e))&&(le=e)}},{key:"queue",get:function(){return se},set:function(e){void 0!==(e=H(e))&&(se=e)}},{key:"repeat",get:function(){return ue},set:function(e){void 0!==(e=R(e))&&(ue=e)}},{key:"repeatAgain",get:function(){return ue}},{key:"speed",get:function(){return ce},set:function(e){void 0!==(e=B(e))&&(ce=e)}},{key:"sync",get:function(){return fe},set:function(e){void 0!==(e=G(e))&&(fe=e)}}]),ve);function ve(){e(this,ve)}Object.freeze(de),de.reset();var pe=[],ye={},ge=new Set,he=[],me=new Map,we="velocityData";function be(e){var t=e[we];if(t)return t;for(var n=e.ownerDocument.defaultView,r=0,i=0;i<he.length;i++){var o=he[i];K(o)?e instanceof n[o]&&(r|=1<<i):e instanceof o&&(r|=1<<i)}t={types:r,count:0,computedStyle:null,cache:{},queueList:{},lastAnimationList:{},lastFinishList:{},window:n};return Object.defineProperty(e,we,{value:t}),t}var v=window&&window===window.window,t=v&&void 0!==window.pageYOffset,Se={isClient:v,isMobile:v&&/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),isGingerbread:v&&/Android 2\.3\.[3-7]/i.test(navigator.userAgent),prefixElement:v&&document.createElement("div"),windowScrollAnchor:t,scrollAnchor:t?window:!v||document.documentElement||document.body.parentNode||document.body,scrollPropertyLeft:t?"pageXOffset":"scrollLeft",scrollPropertyTop:t?"pageYOffset":"scrollTop",className:"velocity-animating",isTicking:!1,first:void 0,last:void 0,firstNew:void 0};function xe(e){var t=Se.last;e._prev=t,e._next=void 0,t?t._next=e:Se.first=e,Se.last=e,Se.firstNew||(Se.firstNew=e);t=e.element;be(t).count++||(e=t,t=Se.className,e instanceof Element&&(e.classList?e.classList.add(t):(u(e,t),e.className+=(e.className.length?" ":"")+t)))}function ke(e){var t=e._next,n=e._prev,r=(null==e.queue?e.options:e).queue;Se.firstNew===e&&(Se.firstNew=t),Se.first===e?Se.first=t:n&&(n._next=t),Se.last===e?Se.last=n:t&&(t._prev=n),r&&be(e.element)&&(e._next=e._prev=void 0)}var _e={};function Oe(e){var t,n,r,i=e.options,o=L(e.queue,i.queue),a=L(e.loop,i.loop,de.loop),l=L(e.repeat,i.repeat,de.repeat),s=8&e._flags;s||!a&&!l?(--(n=be(t=e.element)).count||s||u(t,Se.className),i&&++i._completed===i._total&&(!s&&i.complete&&(function(e){var t=e.complete||e.options.complete;if(t)try{var n=e.elements;t.call(n,n,e)}catch(e){setTimeout(function(){throw e},1)}}(e),i.complete=null),(r=i._resolver)&&(r(e.elements),delete i._resolver)),!1!==o&&(s||(n.lastFinishList[o]=e.timeStart+L(e.duration,i.duration,de.duration)),function(e,t,n){if(!1!==t){K(t)||(t="");var r=be(e),e=r.queueList[t];e?(r.queueList[t]=e._next||null,n||xe(e)):null===e&&delete r.queueList[t]}}(t,o)),ke(e)):(l&&!0!==l?e.repeat=l-1:a&&!0!==a&&(e.loop=a-1,e.repeat=L(e.repeatAgain,i.repeatAgain,de.repeatAgain)),a&&(e._flags^=64),!1!==o&&(be(e.element).lastFinishList[o]=e.timeStart+L(e.duration,i.duration,de.duration)),e.timeStart=e.ellapsedTime=e.percentComplete=0,e._flags&=-5)}function Ee(e){var t=e[0],n=e[1],r=e[2];if((!K(t)||window[t]instanceof Object)&&(K(t)||t instanceof Object))if(K(n))if(V(r)){var i,o=he.indexOf(t),a=3;if(o<0&&!K(t))if(me.has(t))o=he.indexOf(me.get(t));else for(var l in window)if(window[l]===t){(o=he.indexOf(l))<0&&(o=he.push(l)-1,pe[o]={},me.set(t,l));break}o<0&&(o=he.push(t)-1,pe[o]={}),pe[o][n]=r,K(e[a])&&(i=e[a++],(ye[i]||(ye[i]=[])).push(r)),!1===e[a]&&ge.add(n)}else console.warn("VelocityJS: Trying to set 'registerNormalization' callback to an invalid value:",n,r);else console.warn("VelocityJS: Trying to set 'registerNormalization' name to an invalid value:",n);else console.warn("VelocityJS: Trying to set 'registerNormalization' constructor to an invalid value:",t)}function Te(e){var t=e[0],e=e[1],n=he.indexOf(t);if(n<0&&!K(t))if(me.has(t))n=he.indexOf(me.get(t));else for(var r in window)if(window[r]===t){n=he.indexOf(r);break}return 0<=n&&pe[n].hasOwnProperty(e)}function Me(e,t){for(var e=be(e),n=void 0,r=he.length-1,i=e.types;!n&&0<=r;r--)i&1<<r&&(n=pe[r][t]);return n}function Ve(e,t,n,r){var i=ge.has(t),o=!i&&be(e);(i||o&&o.cache[t]!==n)&&(i||(o.cache[t]=n||void 0),(r=r||Me(e,t))&&r(e,n),2<=Dt.debug&&console.info('Set "'+t+'": "'+n+'"',e))}i(["registerNormalization",Ee]),i(["hasNormalization",Te]);var qe={};function Ne(e){var t=qe[e];return t||(qe[e]=e.replace(/-([a-z])/g,function(e,t){return t.toUpperCase()}))}var Ae=/#([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})/gi,Le=/#([a-f\d])([a-f\d])([a-f\d])/gi,Je=/(rgba?\(\s*)?(\b[a-z]+\b)/g,Ie=/rgb(a?)\(([^\)]+)\)/gi,je=/\s+/g,Ce={};function Pe(e,t,n,r){return"rgba("+parseInt(t,16)+","+parseInt(n,16)+","+parseInt(r,16)+",1)"}function ze(e){return e.replace(Ae,Pe).replace(Le,function(e,t,n,r){return Pe(0,t+t,n+n,r+r)}).replace(Je,function(e,t,n){return Ce[n]?(t||"rgba(")+Ce[n]+(t?"":",1)"):e}).replace(Ie,function(e,t,n){return"rgba("+n.replace(je,"")+(t?"":",1")+")"})}function Fe(e,t,n){if("border-box"===Be(e,"boxSizing").toString().toLowerCase()!==n)return 0;var t="width"===t?["Left","Right"]:["Top","Bottom"],r=["padding"+t[0],"padding"+t[1],"border"+t[0]+"Width","border"+t[1]+"Width"],i=0,o=!0,a=!1,l=void 0;try{for(var s=r[Symbol.iterator]();!(o=(u=s.next()).done);o=!0){var u=u.value,u=parseFloat(Be(e,u));isNaN(u)||(i+=u)}}catch(e){a=!0,l=e}finally{try{!o&&s.return&&s.return()}finally{if(a)throw l}}return n?-i:i}function He(e,t){return e.getBoundingClientRect()[t]+Fe(e,t,!0)+"px"}function Re(e,t){var n=be(e),r=n.computedStyle||n.window.getComputedStyle(e,null),i=0;if(n.computedStyle||(n.computedStyle=r),"none"===r.display)switch(t){case"width":case"height":return Ve(e,"display","auto"),i=He(e,t),Ve(e,"display","none"),String(i)}if("auto"===(i=(i=r[t])||e.style[t]))switch(t){case"width":case"height":i=He(e,t);break;case"top":case"left":case"right":case"bottom":var o=Be(e,"position");if("fixed"===o||"absolute"===o){i=e.getBoundingClientRect[t]+"px";break}default:i="0px"}return i?String(i):""}function Be(e,t,n,r){var i=be(e),o=void 0;return ge.has(t)&&(r=!0),!r&&i&&null!=i.cache[t]?o=i.cache[t]:(n=n||Me(e,t))&&(o=n(e),i&&(i.cache[t]=o)),2<=Dt.debug&&console.info('Get "'+t+'": "'+o+'"',e),o}var We=/^#([A-f\d]{3}){1,2}$/i,$e={function:function(e,t,n,r,i,o){return e.call(t,r,n.length,i)},number:function(e,t,n,r,i,o){return String(e)+function(e){for(var t in ye)if(ye[t].includes(e))return t;return""}(o.fn)},string:ze,undefined:function(e,t,n,r,i,o){return ze(Be(t,i,o.fn)||"")}};function Ge(e,t){var n,r,i,o,a,l,s,u,c=e.tweens=Object.create(null),f=e.elements,d=e.element,v=f.indexOf(d),p=be(d),y=L(e.queue,e.options.queue),g=L(e.options.duration,de.duration);for(n in t)t.hasOwnProperty(n)&&(l=Me(d,r=Ne(n)),i=t[n],l||"tween"===r?null!=i?(u=s=void 0,(o=c[r]={}).fn=l,V(i)&&(i=i.call(d,v,f.length,f)),Array.isArray(i)?(a=i[1],l=i[2],s=i[0],u=K(a)&&(/^[\d-]/.test(a)||We.test(a))||V(a)||Y(a)?a:K(a)&&h[a]||Array.isArray(a)?(o.easing=ne(a,g),l):a||l):s=i,o.end=$e[void 0===s?"undefined":W(s)](s,d,f,v,r,o),null==u&&!1!==y&&void 0!==p.queueList[y]||(o.start=$e[void 0===u?"undefined":W(u)](u,d,f,v,r,o),Ze(r,o))):Dt.debug&&console.log('Skipping "'+n+'" due to no value supplied.'):Dt.debug&&console.log('Skipping "'+n+'" due to a lack of browser support.'))}var Qe=/((?:[+\-*/]=)?(?:[+-]?\d*\.\d+|[+-]?\d+)[a-z%]*|(?:.(?!$|[+-]?\d|[+\-*/]=[+-]?\d))+.|.)/g,De=/^([+\-*/]=)?([+-]?\d*\.\d+|[+-]?\d+)(.*)$/;function Ue(i,o){for(var a=i.length,e=[],t=[],l=void 0,n=0;n<a;n++){if(!K(i[n]))return;""===i[n]?e[n]=[""]:e[n]=P(i[n].match(Qe)),t[n]=0,l=l||1<e[n].length}for(var s=[],u=s.pattern=[],r=function(e){if(K(u[u.length-1]))u[u.length-1]+=e;else if(e){u.push(e);for(var t=0;t<a;t++)s[t].push(null)}},c=function(){if(!(l||1<u.length)){for(var e="display"===o,t="visibility"===o,n=0;n<a;n++){var r=i[n];s[n][0]=r,s[n].easing=ne(e&&"none"===r||t&&"hidden"===r||!e&&!t?"at-end":"at-start",400)}return u[0]=!1,s}},f=!0,d=0;d<a;d++)s[d]=[];for(;f;){for(var v=[],p=[],y=void 0,g=!1,h=!1,m=0;m<a;m++){var w=t[m]++,b=e[m][w];if(!b){if(m)return;for(;m<a;m++){var S=t[m]++;if(e[m][S])return c()}f=!1;break}var x=b.match(De);if(x){if(y)return c();var k=parseFloat(x[2]),_=x[3],w=x[1]?x[1][0]+_:void 0,x=w||_;k&&!p.includes(x)&&p.push(x),_||(k?h=!0:g=!0),v[m]=w?[k,x,!0]:[k,x]}else{if(v.length)return c();if(y){if(y!==b)return c()}else y=b}}if(y)r(y);else if(p.length)if(2===p.length&&g&&!h&&p.splice(p[0]?1:0,1),1===p.length){var O=p[0];switch(O[0]){case"+":case"-":case"*":case"/":return void(o&&console.error('Velocity: The first property must not contain a relative function "'+o+'":',i))}u.push(!1);for(var E=0;E<a;E++)s[E].push(v[E][0]);r(O)}else{r("calc(");for(var T=u.length-1,M=0;M<p.length;M++){var V=p[M],q=V[0],N="*"===q||"/"===q,A=N||"+"===q||"-"===q;N&&(u[T]+="(",r(")")),M&&r(" "+(A?q:"+")+" "),u.push(!1);for(var L=0;L<a;L++){var J=v[L],J=J[1]===V?J[0]:3===J.length?s[L-1][s[L-1].length-1]:N?1:0;s[L].push(J)}r(A?V.substring(1):V)}r(")")}}for(var I=0,j=0;I<u.length;I++){var C=u[I];K(C)?j&&0<=C.indexOf(",")?j++:0<=C.indexOf("rgb")&&(j=1):j&&(j<4?u[I]=!0:j=0)}return s}function Ze(e,t,n,r){var i=t.start,o=t.end;if(K(o)&&K(i)){var a,l,s,u=Ue([i,o],e);if(!u&&r&&(a=i.match(/\d\.?\d*/g)||["0"],l=a.length,s=0,u=Ue([o.replace(/\d+\.?\d*/g,function(){return a[s++%l]}),o],e)),u)switch(Dt.debug&&console.log("Velocity: Sequence found:",u),u[0].percent=0,u[1].percent=1,t.sequence=u,t.easing){case h["at-start"]:case h.during:case h["at-end"]:u[0].easing=u[1].easing=t.easing}}}function Ye(e){if(Se.firstNew===e&&(Se.firstNew=e._next),!(1&e._flags)){var t,n=e.element,r=e.tweens;L(e.options.duration,de.duration);for(t in r){var i,o=r[t];null==o.start&&(K(i=Be(e.element,t))?(o.start=ze(i),Ze(t,o,0,!0)):Array.isArray(i)||console.warn("bad type",o,t,i)),Dt.debug&&console.log('tweensContainer "'+t+'": '+JSON.stringify(o),n)}e._flags|=1}}function Xe(e){var t=e.begin||e.options.begin;if(t)try{var n=e.elements;t.call(n,n,e)}catch(e){setTimeout(function(){throw e},1)}}function Ke(){var e=!0,t=!1,n=void 0;try{for(var r,i=rt[Symbol.iterator]();!(e=(r=i.next()).done);e=!0)!function(e){var t=e.progress||e.options.progress;if(t)try{var n=e.elements,r=e.percentComplete,i=e.options,o=e.tween;t.call(n,n,r,Math.max(0,e.timeStart+(null!=e.duration?e:null!=i.duration?i:de).duration-ut),void 0!==o?o:String(100*r),e)}catch(e){setTimeout(function(){throw e},1)}}(r.value)}catch(e){t=!0,n=e}finally{try{!e&&i.return&&i.return()}finally{if(t)throw n}}rt.clear();var o=!0,a=!1,l=void 0;try{for(var s,u=nt[Symbol.iterator]();!(o=(s=u.next()).done);o=!0)Oe(s.value)}catch(e){a=!0,l=e}finally{try{!o&&u.return&&u.return()}finally{if(a)throw l}}nt.clear()}var et,tt=1e3/60,nt=new Set,rt=new Set,it=("function"!=typeof(t=window.performance||{}).now&&(et=t.timing&&t.timing.navigationStart?t.timing.navigationStart:n(),t.now=function(){return n()-et}),t),ot=function(e){return setTimeout(e,Math.max(0,tt-(it.now()-ut)))},at=window.requestAnimationFrame||ot,lt=void 0,st=void 0,ut=0;try{(st=new Worker(URL.createObjectURL(new Blob(["("+function(){var t=this,n=void 0;this.onmessage=function(e){switch(e.data){case!0:n=n||setInterval(function(){t.postMessage(!0)},1e3/30);break;case!1:n&&(clearInterval(n),n=0);break;default:t.postMessage(e.data)}}}+")()"])))).onmessage=function(e){(!0===e.data?ct:Ke)()},Se.isMobile||void 0===document.hidden||document.addEventListener("visibilitychange",function(){st.postMessage(Se.isTicking&&document.hidden)})}catch(e){}function ct(e){if(!lt){if(!(lt=!0)!==e){var t=it.now(),n=ut?t-ut:tt,r=de.speed,i=de.easing,o=de.duration,a=void 0,l=void 0;if(n>=de.minFrameTime||!ut){for(ut=t;Se.firstNew;)Ye(Se.firstNew);for(a=Se.first;a&&a!==Se.firstNew;a=a._next){var s,u,c,f=a.element,d=be(f);f.parentNode&&d?(s=a.options,u=a._flags,(c=a.timeStart)||(c=t-n,!1!==(f=(null!=a.queue?a:s).queue)&&(c=Math.max(c,d.lastFinishList[f]||0)),a.timeStart=c),16&u?a.timeStart+=n:2&u||(a._flags|=2,s._ready++)):ke(a)}for(a=Se.first;a&&a!==Se.firstNew;a=l){var v=a._flags,l=a._next;if(2&v&&!(16&v)){var p=a.options;if(32&v&&p._ready<p._total)a.timeStart+=n;else{var y=null!=a.speed?a.speed:null!=p.speed?p.speed:r,g=a.timeStart;if(!(4&v)){var h=(null!=a.delay?a:p).delay;if(h){if(t<g+h/y)continue;a.timeStart=g+=h/(0<h?y:1)}a._flags|=4,0==p._started++&&(p._first=a,p.begin&&(Xe(a),p.begin=void 0))}1!==y&&(a.timeStart=g+=Math.min(n,t-g)*(1-y));var m,w=null!=a.easing?a.easing:null!=p.easing?p.easing:i,y=a.ellapsedTime=t-g,g=null!=a.duration?a.duration:null!=p.duration?p.duration:o,b=a.percentComplete=Dt.mock?1:Math.min(y/g,1),S=a.tweens,x=64&v;for(m in(a.progress||p._first===a&&p.progress)&&rt.add(a),1===b&&nt.add(a),S){var k=S[m],_=k.sequence,O=_.pattern,E="",T=0;if(O){for(var M=(k.easing||w)(b,0,1,m),V=0,q=0;q<_.length-1;q++)_[q].percent<M&&(V=q);for(var N=_[V],A=_[V+1]||N,L=(b-N.percent)/(A.percent-N.percent),J=x?1-L:L,I=A.easing||w||z;T<O.length;T++){var j,C=N[T];null==C?E+=O[T]:C===(j=A[T])?E+=C:(j=I(J,C,j,m),E+=!0!==O[T]?j:Math.round(j))}"tween"!==m?(1===b&&(E=function(e){if(0<=e.indexOf("calc(")){for(var t=e.split(/([\(\)])/),n=0,r=0;r<t.length;r++){var i=t[r];switch(i){case"(":n++;break;case")":n--;break;default:n&&"0"===i[0]&&(t[r]=i.replace(/^0[a-z%]+ \+ /,""))}}return t.join("").replace(/(?:calc)?\(([0-9\.]+[a-z%]+)\)/g,"$1")}return e}(E)),Ve(a.element,m,E,k.fn)):a.tween=E}else console.warn("VelocityJS: Missing pattern:",m,JSON.stringify(k[m])),delete S[m]}}}}(rt.size||nt.size)&&(document.hidden?st?st.postMessage(""):setTimeout(Ke,1):Ke())}}Se.first?(Se.isTicking=!0,document.hidden?st?!1===e&&st.postMessage(!0):ot(ct):at(ct)):(Se.isTicking=!1,ut=0,document.hidden&&st&&st.postMessage(!1)),lt=!1}}function ft(e,t,n){if(Ye(e),void 0===t||t===L(e.queue,e.options.queue,n)){for(var r in 4&e._flags||(0==(n=e.options)._started++&&(n._first=e,n.begin&&(Xe(e),n.begin=void 0)),e._flags|=4),e.tweens){var i=e.tweens[r],o=i.sequence,a=o.pattern,l="",s=0;if(a)for(var u=o[o.length-1];s<a.length;s++){var c=u[s];l+=null==c?a[s]:c}Ve(e.element,r,l,i.fn)}Oe(e)}}i(["finish",function(e,t,n){var r=H(e[0],!0),i=de.queue,o=!0===e[void 0===r?0:1];if($(t)&&t.velocity.animations){var a=!0,l=!1,s=void 0;try{for(var u,c=t.velocity.animations[Symbol.iterator]();!(a=(u=c.next()).done);a=!0)ft(u.value,r,i)}catch(e){l=!0,s=e}finally{try{!a&&c.return&&c.return()}finally{if(l)throw s}}}else{for(;Se.firstNew;)Ye(Se.firstNew);for(var f,d=Se.first;d&&(o||d!==Se.firstNew);d=f||Se.firstNew)f=d._next,t&&!t.includes(d.element)||ft(d,r,i)}n&&($(t)&&t.velocity.animations&&t.then?t.then(n._resolver):n._resolver(t))}],!0);var dt={isExpanded:1,isReady:2,isStarted:4,isStopped:8,isPaused:16,isSync:32,isReverse:64};function vt(e,t,n,r){void 0!==t&&t!==L(e.queue,e.options.queue,n)||(r?e._flags|=16:e._flags&=-17)}function pt(e,t,n,r){var i=0===r.indexOf("pause"),o="false"!==(0<=r.indexOf(".")?r.replace(/^.*\./,""):void 0)&&H(e[0]),a=de.queue;if($(t)&&t.velocity.animations){var l=!0,s=!1,u=void 0;try{for(var c,f=t.velocity.animations[Symbol.iterator]();!(l=(c=f.next()).done);l=!0)vt(c.value,o,a,i)}catch(e){s=!0,u=e}finally{try{!l&&f.return&&f.return()}finally{if(s)throw u}}}else for(var d=Se.first;d;)t&&!t.includes(d.element)||vt(d,o,a,i),d=d._next;n&&($(t)&&t.velocity.animations&&t.then?t.then(n._resolver):n._resolver(t))}function yt(e,t,n,r){var i=e[0],o=e[1];if(!i)return console.warn("VelocityJS: Cannot access a non-existant property!"),null;if(void 0===o&&!X(i)){if(Array.isArray(i)){if(1===t.length){var a={},l=!0,s=!1,u=void 0;try{for(var c=i[Symbol.iterator]();!(l=(f=c.next()).done);l=!0){var f=f.value;a[f]=ze(Be(t[0],f))}}catch(e){s=!0,u=e}finally{try{!l&&c.return&&c.return()}finally{if(s)throw u}}return a}var d=[],v=!0,p=!1,y=void 0;try{for(var g,h=t[Symbol.iterator]();!(v=(g=h.next()).done);v=!0){var m=g.value,w={},b=!0,S=!1,x=void 0;try{for(var k=i[Symbol.iterator]();!(b=(_=k.next()).done);b=!0){var _=_.value;w[_]=ze(Be(m,_))}}catch(e){S=!0,x=e}finally{try{!b&&k.return&&k.return()}finally{if(S)throw x}}d.push(w)}}catch(e){p=!0,y=e}finally{try{!v&&h.return&&h.return()}finally{if(p)throw y}}return d}if(1===t.length)return ze(Be(t[0],i));var O=[],E=!0,T=!1,M=void 0;try{for(var V=t[Symbol.iterator]();!(E=(q=V.next()).done);E=!0){var q=q.value;O.push(ze(Be(q,i)))}}catch(e){T=!0,M=e}finally{try{!E&&V.return&&V.return()}finally{if(T)throw M}}return O}var N=[];if(X(i)){for(var A in i)if(i.hasOwnProperty(A)){var L=!0,J=!1,I=void 0;try{for(var j=t[Symbol.iterator]();!(L=(P=j.next()).done);L=!0){var C=P.value,P=i[A];K(P)||Y(P)?Ve(C,A,i[A]):(N.push('Cannot set a property "'+A+'" to an unknown type: '+(void 0===P?"undefined":W(P))),console.warn('VelocityJS: Cannot set a property "'+A+'" to an unknown type:',P))}}catch(e){J=!0,I=e}finally{try{!L&&j.return&&j.return()}finally{if(J)throw I}}}}else if(K(o)||Y(o)){var z=!0,F=!1,H=void 0;try{for(var R,B=t[Symbol.iterator]();!(z=(R=B.next()).done);z=!0)Ve(R.value,i,String(o))}catch(e){F=!0,H=e}finally{try{!z&&B.return&&B.return()}finally{if(F)throw H}}}else N.push('Cannot set a property "'+i+'" to an unknown type: '+(void 0===o?"undefined":W(o))),console.warn('VelocityJS: Cannot set a property "'+i+'" to an unknown type:',o);n&&(N.length?n._rejecter(N.join(", ")):$(t)&&t.velocity.animations&&t.then?t.then(n._resolver):n._resolver(t))}function gt(e,t,n){Ye(e),void 0!==t&&t!==L(e.queue,e.options.queue,n)||(e._flags|=8,Oe(e))}i(["option",function(e,t,n,r){var i=e[0],o="false"!==(r=0<=r.indexOf(".")?r.replace(/^.*\./,""):void 0)&&H(r,!0),a=void 0,l=e[1];if(!i)return console.warn("VelocityJS: Cannot access a non-existant key!"),null;if($(t)&&t.velocity.animations)a=t.velocity.animations;else{a=[];for(var s=Se.first;s;s=s._next)0<=t.indexOf(s.element)&&L(s.queue,s.options.queue)===o&&a.push(s);if(1<t.length&&1<a.length){for(var u=1,c=a[0].options;u<a.length;)if(a[u++].options!==c){c=null;break}c&&(a=[a[0]])}}if(void 0===l){var f=[],d=dt[i],v=!0,p=!1,y=void 0;try{for(var g=a[Symbol.iterator]();!(v=(h=g.next()).done);v=!0){var h=h.value;void 0===d?f.push(L(h[i],h.options[i])):f.push(0==(h._flags&d))}}catch(e){p=!0,y=e}finally{try{!v&&g.return&&g.return()}finally{if(p)throw y}}return 1===t.length&&1===a.length?f[0]:f}var m=void 0;switch(i){case"cache":l=O(l);break;case"begin":l=I(l);break;case"complete":l=j(l);break;case"delay":l=C(l);break;case"duration":l=te(l);break;case"fpsLimit":l=E(l);break;case"loop":l=F(l);break;case"percentComplete":m=!0,l=parseFloat(l);break;case"repeat":case"repeatAgain":l=R(l);break;default:if("_"!==i[0]){var w=parseFloat(l);l===String(w)&&(l=w);break}case"queue":case"promise":case"promiseRejectEmpty":case"easing":case"started":return void console.warn("VelocityJS: Trying to set a read-only key:",i)}if(void 0===l||l!=l)return console.warn("VelocityJS: Trying to set an invalid value:"+i+"="+l+" ("+e[1]+")"),null;var b=!0,S=!1,x=void 0;try{for(var k=a[Symbol.iterator]();!(b=(_=k.next()).done);b=!0){var _=_.value;m?_.timeStart=ut-L(_.duration,_.options.duration,de.duration)*l:_[i]=l}}catch(e){S=!0,x=e}finally{try{!b&&k.return&&k.return()}finally{if(S)throw x}}n&&($(t)&&t.velocity.animations&&t.then?t.then(n._resolver):n._resolver(t))}],!0),i(["pause",pt],!0),i(["resume",pt],!0),i(["property",yt],!0),i(["reverse",function(e,t,n,r){throw new SyntaxError("VelocityJS: The 'reverse' action is built in and private.")}],!0),i(["stop",function(e,t,n,r){var i=H(e[0],!0),o=de.queue,a=!0===e[void 0===i?0:1];if($(t)&&t.velocity.animations){var l=!0,s=!1,u=void 0;try{for(var c,f=t.velocity.animations[Symbol.iterator]();!(l=(c=f.next()).done);l=!0)gt(c.value,i,o)}catch(e){s=!0,u=e}finally{try{!l&&f.return&&f.return()}finally{if(s)throw u}}}else{for(;Se.firstNew;)Ye(Se.firstNew);for(var d,v=Se.first;v&&(a||v!==Se.firstNew);v=d||Se.firstNew)d=v._next,t&&!t.includes(v.element)||gt(v,i,o)}n&&($(t)&&t.velocity.animations&&t.then?t.then(n._resolver):n._resolver(t))}],!0),i(["style",yt],!0),i(["tween",function(e,t,n,r){var i=void 0;if(t){if(1!==t.length)throw new Error("VelocityJS: Cannot tween more than one element!")}else{if(!e.length)return console.info('Velocity(<element>, "tween", percentComplete, property, end | [end, <easing>, <start>], <easing>) => value\nVelocity(<element>, "tween", percentComplete, {property: end | [end, <easing>, <start>], ...}, <easing>) => {property: value, ...}'),null;t=[document.body],i=!0}var o,a,l=e[0],s={elements:t,element:t[0],queue:!1,options:{duration:1e3},tweens:null},u={},c=e[1],f=void 0,d=void 0,v=e[2],p=0;if(K(e[1])?v=_e&&_e[e[1]]?(d=_e[e[1]],c={},e[2]):(f=!0,o={},a=e[1],t=e[2],a in o?Object.defineProperty(o,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):o[a]=t,c=o,e[3]):Array.isArray(e[1])&&(f=!0,c={tween:e[1]},v=e[2]),!Y(l)||l<0||1<l)throw new Error("VelocityJS: Must tween a percentage from 0 to 1!");if(!X(c))throw new Error("VelocityJS: Cannot tween an invalid property!");if(i)for(var y in c)if(c.hasOwnProperty(y)&&(!Array.isArray(c[y])||c[y].length<2))throw new Error("VelocityJS: When not supplying an element you must force-feed values: "+y);var g,h=ne(L(v,de.easing),ee);for(g in d?Yt(s,d):Ge(s,c),s.tweens){var m=s.tweens[g],w=m.sequence,b=w.pattern,S="",x=0;if(p++,b){for(var k=(m.easing||h)(l,0,1,g),_=0,O=0;O<w.length-1;O++)w[O].percent<k&&(_=O);for(var E=w[_],T=w[_+1]||E,M=(l-E.percent)/(T.percent-E.percent),V=T.easing||z;x<b.length;x++){var q,N=E[x];null==N?S+=b[x]:N===(q=T[x])?S+=N:(q=V(M,N,q,g),S+=!0===b[x]?Math.round(q):q)}u[g]=S}}if(f&&1===p)for(var A in u)if(u.hasOwnProperty(A))return u[A];return u}],!0);var ht,mt,wt,bt,St,xt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgrey:11119017,darkgreen:25600,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,grey:8421504,green:32768,greenyellow:11403055,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgrey:13882323,lightgreen:9498256,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};for(ht in xt)xt.hasOwnProperty(ht)&&(mt=xt[ht],Ce[ht]=Math.floor(mt/65536)+","+Math.floor(mt/256%256)+","+mt%256);function kt(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375}function _t(e){return 1-kt(1-e)}wt=1.7,a(["easeInBack",function(e,t,n){return 0===e?t:1===e?n:Math.pow(e,2)*((wt+1)*e-wt)*(n-t)}]),bt=1.7,a(["easeOutBack",function(e,t,n){return 0===e?t:1===e?n:(Math.pow(--e,2)*((bt+1)*e+bt)+1)*(n-t)}]),St=1.7,St*=1.525,a(["easeInOutBack",function(e,t,n){return 0===e?t:1===e?n:.5*((e*=2)<1?Math.pow(e,2)*((St+1)*e-St):Math.pow(e-2,2)*((St+1)*(e-2)+St)+2)*(n-t)}]),a(["easeInBounce",function(e,t,n){return 0===e?t:1===e?n:_t(e)*(n-t)}]),a(["easeOutBounce",function(e,t,n){return 0===e?t:1===e?n:kt(e)*(n-t)}]),a(["easeInOutBounce",function(e,t,n){return 0===e?t:1===e?n:(e<.5?.5*_t(2*e):.5*kt(2*e-1)+.5)*(n-t)}]);var Ot,Et,Tt,Mt,Vt,qt,Nt=2*Math.PI;function At(n,r){return function(e,t){if(void 0===t)return Fe(e,n,r)+"px";Ve(e,n,parseFloat(t)-Fe(e,n,r)+"px")}}Ot=1,Et=.3,a(["easeInElastic",function(e,t,n){return 0===e?t:1===e?n:-(Ot*Math.pow(2,10*--e)*Math.sin((e-Et/Nt*Math.asin(1/Ot))*Nt/Et))*(n-t)}]),Tt=1,Mt=.3,a(["easeOutElastic",function(e,t,n){return 0===e?t:1===e?n:(Tt*Math.pow(2,-10*e)*Math.sin((e-Mt/Nt*Math.asin(1/Tt))*Nt/Mt)+1)*(n-t)}]),Vt=1,qt=.3*1.5,a(["easeInOutElastic",function(e,t,n){if(0===e)return t;if(1===e)return n;var r=qt/Nt*Math.asin(1/Vt);return((e=2*e-1)<0?Vt*Math.pow(2,10*e)*Math.sin((e-r)*Nt/qt)*-.5:Vt*Math.pow(2,-10*e)*Math.sin((e-r)*Nt/qt)*.5+1)*(n-t)}]),a(["at-start",function(e,t,n){return 0===e?t:n}]),a(["during",function(e,t,n){return 0===e||1===e?t:n}]),a(["at-end",function(e,t,n){return 1===e?n:t}]),Ee(["Element","innerWidth",At("width",!0)]),Ee(["Element","innerHeight",At("height",!0)]),Ee(["Element","outerWidth",At("width",!1)]),Ee(["Element","outerHeight",At("height",!1)]);var Lt=/^(b|big|i|small|tt|abbr|acronym|cite|code|dfn|em|kbd|strong|samp|let|a|bdo|br|img|map|object|q|script|span|sub|sup|button|input|label|select|textarea)$/i,Jt=/^(li)$/i,It=/^(tr)$/i,jt=/^(table)$/i,Ct=/^(tbody)$/i;function Pt(o,a){return function(e,t){if(null==t)return Be(e,"client"+o,null,!0),Be(e,"scroll"+o,null,!0),e["scroll"+a]+"px";var n=parseFloat(t);switch(t.replace(String(n),"")){case"":case"px":e["scroll"+a]=n;break;case"%":var r=parseFloat(Be(e,"client"+o)),i=parseFloat(Be(e,"scroll"+o));e["scroll"+a]=Math.max(0,i-r)*n/100}}}Ee(["Element","display",function(e,t){var n,r=e.style;if(void 0===t)return Re(e,"display");"auto"===t&&(n=e&&e.nodeName,e=be(e),t=Lt.test(n)?"inline":Jt.test(n)?"list-item":It.test(n)?"table-row":jt.test(n)?"table":Ct.test(n)?"table-row-group":"block",e.cache.display=t),r.display=t}]),Ee(["HTMLElement","scroll",Pt("Height","Top"),!1]),Ee(["HTMLElement","scrollTop",Pt("Height","Top"),!1]),Ee(["HTMLElement","scrollLeft",Pt("Width","Left"),!1]),Ee(["HTMLElement","scrollWidth",function(e,t){if(null==t)return e.scrollWidth+"px"}]),Ee(["HTMLElement","clientWidth",function(e,t){if(null==t)return e.clientWidth+"px"}]),Ee(["HTMLElement","scrollHeight",function(e,t){if(null==t)return e.scrollHeight+"px"}]),Ee(["HTMLElement","clientHeight",function(e,t){if(null==t)return e.clientHeight+"px"}]);var zt=/^(b(lockSize|o(rder(Bottom(LeftRadius|RightRadius|Width)|Image(Outset|Width)|LeftWidth|R(adius|ightWidth)|Spacing|Top(LeftRadius|RightRadius|Width)|Width)|ttom))|column(Gap|RuleWidth|Width)|f(lexBasis|ontSize)|grid(ColumnGap|Gap|RowGap)|height|inlineSize|le(ft|tterSpacing)|m(a(rgin(Bottom|Left|Right|Top)|x(BlockSize|Height|InlineSize|Width))|in(BlockSize|Height|InlineSize|Width))|o(bjectPosition|utline(Offset|Width))|p(adding(Bottom|Left|Right|Top)|erspective)|right|s(hapeMargin|troke(Dashoffset|Width))|t(extIndent|op|ransformOrigin)|w(idth|ordSpacing))$/;var Ft,Ht=/^(webkit|moz|ms|o)[A-Z]/,t=Se.prefixElement;if(t)for(var Rt in t.style)Ht.test(Rt)?Ee(["Element",Ft=Rt.replace(/^[a-z]+([A-Z])/,function(e,t){return t.toLowerCase()}),function(n,r){return function(e,t){if(void 0===t)return Re(e,n)||Re(e,r);e.style[n]=e.style[r]=t}}(Rt,Ft),zt.test(Ft)?"px":void 0]):Te(["Element",Rt])||Ee(["Element",Rt,function(n){return function(e,t){if(void 0===t)return Re(e,n);e.style[n]=t}}(Rt),zt.test(Rt)?"px":void 0]);var Bt=document.createElement("div"),Wt=/^SVG(.*)Element$/,$t=/Element$/;function Gt(n){return function(e,t){if(void 0===t)try{return e.getBBox()[n]+"px"}catch(e){return"0px"}e.setAttribute(n,t)}}Object.getOwnPropertyNames(window).forEach(function(t){var e=Wt.exec(t);if(e&&"SVG"!==e[1])try{var n,r=e[1]?document.createElementNS("http://www.w3.org/2000/svg",(e[1]||"svg").toLowerCase()):document.createElement("svg");for(n in r){var i=r[n];!K(n)||"o"===n[0]&&"n"===n[1]||n===n.toUpperCase()||$t.test(n)||n in Bt||V(i)||Ee([t,n,function(n){return function(e,t){if(void 0===t)return e.getAttribute(n);e.setAttribute(n,t)}}(n)])}}catch(e){console.error("VelocityJS: Error when trying to identify SVG attributes on "+t+".",e)}}),Ee(["SVGElement","width",Gt("width")]),Ee(["SVGElement","height",Gt("height")]),Ee(["Element","tween",function(e,t){if(void 0===t)return""}]);var Qt,Dt=tn;if((t=Qt=Qt||{}).Actions=J,t.Easings=h,t.Sequences=_e,t.State=Se,t.defaults=de,t.patch=nn,t.debug=!1,t.mock=!1,t.version="2.0.6",t.Velocity=tn,function(){if(document.documentMode)return document.documentMode;for(var e=7;4<e;e--){var t=document.createElement("div");if(t.innerHTML="\x3c!--[if IE "+e+"]><span></span><![endif]--\x3e",t.getElementsByTagName("span").length)return t=null,e}}()<=8)throw new Error("VelocityJS cannot run on Internet Explorer 8 or earlier");window&&(an=window.jQuery,on=window.Zepto,nn(window,!0),nn(Element&&Element.prototype),nn(NodeList&&NodeList.prototype),nn(HTMLCollection&&HTMLCollection.prototype),nn(an,!0),nn(an&&an.fn),nn(on,!0),nn(on&&on.fn));for(var Ut in Qt)!function(t){if(Qt.hasOwnProperty(t))switch(void 0===t?"undefined":W(t)){case"number":case"boolean":A(Dt,t,{get:function(){return Qt[t]},set:function(e){Qt[t]=e}},!0);break;default:A(Dt,t,Qt[t],!0)}}(Ut);Object.freeze(Dt);var Zt=/(\d*\.\d+|\d+\.?|from|to)/g;function Yt(e,t){var n,r,i=e.tweens=Object.create(null),o=e.element;for(n in t.tweens)t.tweens.hasOwnProperty(n)&&((r=Me(o,n))||"tween"===n?i[n]={fn:r,sequence:t.tweens[n]}:Dt.debug&&console.log("Skipping ["+n+"] due to a lack of browser support."))}i(["registerSequence",function e(t){if(X(t[0]))for(var n in t[0])t[0].hasOwnProperty(n)&&e([n,t[0][n]]);else if(K(t[0])){var r=t[0],i=t[1];if(K(r))if(X(i)){_e[r]&&console.warn("VelocityJS: Replacing named sequence:",r);var o,a={},l=new Array(100),s=[],u=_e[r]={},c=te(i.duration);for(o in u.tweens={},Y(c)&&(u.duration=c),i)if(i.hasOwnProperty(o)){var f=String(o).match(Zt);if(f){var d=!0,v=!1,p=void 0;try{for(var y=f[Symbol.iterator]();!(d=(h=y.next()).done);d=!0){var g=h.value,h="from"===g?0:"to"===g?100:parseFloat(g);if(h<0||100<h)console.warn("VelocityJS: Trying to use an invalid value as a percentage (0 <= n <= 100):",r,h);else if(isNaN(h))console.warn("VelocityJS: Trying to use an invalid number as a percentage:",r,o,g);else for(var m in a[String(h)]||(a[String(h)]=[]),a[String(h)].push(o),i[o])s.includes(m)||s.push(m)}}catch(e){v=!0,p=e}finally{try{!d&&y.return&&y.return()}finally{if(v)throw p}}}}var w=Object.keys(a).sort(function(e,t){return e=parseFloat(e),(t=parseFloat(t))<e?1:e<t?-1:0});w.forEach(function(e){l.push.apply(a[e])});var b=!0,S=!1,x=void 0;try{for(var k=s[Symbol.iterator]();!(b=(_=k.next()).done);b=!0){var _=_.value,O=[],E=Ne(_),T=!0,M=!1,V=void 0;try{for(var q,N=w[Symbol.iterator]();!(T=(q=N.next()).done);T=!0){var A=q.value,L=!0,J=!1,I=void 0;try{for(var j=a[A][Symbol.iterator]();!(L=(C=j.next()).done);L=!0){var C=i[C.value];C[E]&&O.push(K(C[E])?C[E]:C[E][0])}}catch(e){J=!0,I=e}finally{try{!L&&j.return&&j.return()}finally{if(J)throw I}}}}catch(e){M=!0,V=e}finally{try{!T&&N.return&&N.return()}finally{if(M)throw V}}if(O.length){var P=Ue(O,E),z=0;if(P){var F=!0,H=!1,R=void 0;try{for(var B,W=w[Symbol.iterator]();!(F=(B=W.next()).done);F=!0){var $=B.value,G=!0,Q=!1,D=void 0;try{for(var U=a[$][Symbol.iterator]();!(G=(Z=U.next()).done);G=!0){var Z=i[Z.value][E];Z&&(Array.isArray(Z)&&1<Z.length&&(K(Z[1])||Array.isArray(Z[1]))&&(P[z].easing=ne(Z[1],u.duration||ee)),P[z++].percent=parseFloat($)/100)}}catch(e){Q=!0,D=e}finally{try{!G&&U.return&&U.return()}finally{if(Q)throw D}}}}catch(e){H=!0,R=e}finally{try{!F&&W.return&&W.return()}finally{if(H)throw R}}u.tweens[E]=P}}}}catch(e){S=!0,x=e}finally{try{!b&&k.return&&k.return()}finally{if(S)throw x}}}else console.warn("VelocityJS: Trying to set 'registerSequence' sequence to an invalid value:",r,i);else console.warn("VelocityJS: Trying to set 'registerSequence' name to an invalid value:",r)}}],!0);var Xt=void 0;try{Xt=Promise}catch(e){}var Kt=", if that is deliberate then pass `promiseRejectEmpty:false` as an option";function en(e,t){A(t,"promise",e),A(t,"then",e.then.bind(e)),A(t,"catch",e.catch.bind(e)),e.finally&&A(t,"finally",e.finally.bind(e))}function tn(){var e=de,t=arguments.length<=0?void 0:arguments[0],n=X(t)&&(t.p||X(t.properties)&&!t.properties.names||K(t.properties)),r=0,i=void 0,o=void 0,a=void 0,l=void 0,s=void 0,u=void 0,c=void 0;q(this)?i=[this]:N(this)?(i=P(this),$(this)&&(l=this.velocity.animations)):n?(i=P(t.elements||t.e),r++):q(t)?(i=P([t]),r++):N(t)&&(i=P(t),r++),i&&(A(i,"velocity",tn.bind(i)),l&&A(i.velocity,"animations",l));var f="reverse"===(o=n?L(t.properties,t.p):(p=r++,arguments.length<=p?void 0:arguments[p])),d=!f&&K(o),v=d&&_e[o],p=n?L(t.options,t.o):arguments.length<=r?void 0:arguments[r];if(X(p)&&(a=p),Xt&&L(a&&a.promise,e.promise)&&(s=new Xt(function(t,e){c=e,u=function(e){$(e)&&e.promise?(delete e.then,delete e.catch,delete e.finally,t(e),en(e.promise,e)):t(e)}}),i&&en(s,i)),s&&(p=L(t=a&&a.promiseRejectEmpty,e.promiseRejectEmpty),i||d?o||(p?c("Velocity: No properties supplied"+(M(t)?"":Kt)+". Aborting."):u()):p?c("Velocity: No elements supplied"+(M(t)?"":Kt)+". Aborting."):u()),!i&&!d||!o)return s;if(d){for(var y,g=[],h=s&&{_promise:s,_resolver:u,_rejecter:c};r<arguments.length;)g.push((y=r++,arguments.length<=y?void 0:arguments[y]));var m=o.replace(/\..*$/,""),w=J[m];if(w){var b=w(g,i,h,o);return void 0!==b?b:i||s}if(!v)return void console.error("VelocityJS: First argument ("+o+") was not a property map, a known action, or a registered redirect. Aborting.")}d=void 0;if(X(o)||f||v){var S,x={},m=e.sync;if(s&&(A(x,"_promise",s),A(x,"_rejecter",c),A(x,"_resolver",u)),A(x,"_ready",0),A(x,"_started",0),A(x,"_completed",0),A(x,"_total",0),X(a)?(d=void 0!==(S=te(a.duration)),x.duration=L(S,e.duration),x.delay=L(C(a.delay),e.delay),x.easing=ne(L(a.easing,e.easing),x.duration)||ne(e.easing,x.duration),x.loop=L(F(a.loop),e.loop),x.repeat=x.repeatAgain=L(R(a.repeat),e.repeat),null!=a.speed&&(x.speed=L(B(a.speed),1)),M(a.promise)&&(x.promise=a.promise),x.queue=L(H(a.queue),e.queue),a.mobileHA&&!Se.isGingerbread&&(x.mobileHA=!0),!0===a.drag&&(x.drag=!0),(Y(a.stagger)||V(a.stagger))&&(x.stagger=a.stagger),f||(null!=a.display&&(o.display=a.display,console.error('Deprecated "options.display" used, this is now a property:',a.display)),null!=a.visibility&&(o.visibility=a.visibility,console.error('Deprecated "options.visibility" used, this is now a property:',a.visibility))),w=I(a.begin),h=j(a.complete),b=function(e){if(V(e))return e;null!=e&&console.warn("VelocityJS: Trying to set 'progress' to an invalid value:",e)}(a.progress),S=G(a.sync),null!=w&&(x.begin=w),null!=h&&(x.complete=h),null!=b&&(x.progress=b),null!=S&&(m=S)):n||(S=0,x.duration=te(arguments.length<=r?void 0:arguments[r],!0),void 0===x.duration?x.duration=e.duration:(d=!0,S++),V(arguments.length<=r+S?void 0:arguments[r+S])||void 0!==(n=ne(arguments.length<=r+S?void 0:arguments[r+S],L(x&&te(x.duration),e.duration),!0))&&(S++,x.easing=n),void 0!==(S=j(arguments.length<=r+S?void 0:arguments[r+S],!0))&&(x.complete=S),x.delay=e.delay,x.loop=e.loop,x.repeat=x.repeatAgain=e.repeat),f&&!1===x.queue)throw new Error("VelocityJS: Cannot reverse a queue:false animation.");!d&&v&&v.duration&&(x.duration=v.duration);for(var k={options:x,elements:i,_prev:void 0,_next:void 0,_flags:m?32:0,percentComplete:0,ellapsedTime:0,timeStart:0},l=[],_=0;_<i.length;_++){var O=i[_],E=0;if(q(O)){if(f){var T=be(O).lastAnimationList[x.queue];if(!(o=T&&T.tweens)){console.error("VelocityJS: Attempting to reverse an animation on an element with no previous animation:",O);continue}E|=64&~(64&T._flags)}T=Object.assign({},k,{element:O,_flags:k._flags|E});x._total++,l.push(T),x.stagger&&(V(x.stagger)?Y(E=function(e,t,n,r,i,o){try{return e.call(t,n,r,i,o)}catch(e){console.error("VelocityJS: Exception when calling '"+o+"' callback:",e)}}(x.stagger,O,_,i.length,i,"stagger"))&&(T.delay=x.delay+E):T.delay=x.delay+x.stagger*_),x.drag&&(T.duration=x.duration-x.duration*Math.max(1-(_+1)/i.length,.75)),v?Yt(T,v):f?T.tweens=o:(T.tweens=Object.create(null),Ge(T,o)),function(e,t,n){if(e=be(e),!1!==n&&(e.lastAnimationList[n]=t),!1===n)xe(t);else{K(n)||(n="");var r=e.queueList[n];if(r){for(;r._next;)r=r._next;(r._next=t)._prev=r}else null===r?e.queueList[n]=t:(e.queueList[n]=null,xe(t))}}(O,T,x.queue)}}!1===Se.isTicking&&ct(!1),l&&A(i.velocity,"animations",l)}return i||s}function nn(e,t){try{A(e,(t?"V":"v")+"elocity",tn)}catch(e){console.warn("VelocityJS: Error when trying to add prototype.",e)}}var rn,on,an,ln=tn;if((an=rn=rn||{}).Actions=J,an.Easings=h,an.Sequences=_e,an.State=Se,an.defaults=de,an.patch=nn,an.debug=!1,an.mock=!1,an.version="2.0.6",an.Velocity=tn,function(){if(document.documentMode)return document.documentMode;for(var e=7;4<e;e--){var t=document.createElement("div");if(t.innerHTML="\x3c!--[if IE "+e+"]><span></span><![endif]--\x3e",t.getElementsByTagName("span").length)return t=null,e}}()<=8)throw new Error("VelocityJS cannot run on Internet Explorer 8 or earlier");window&&(on=window.jQuery,an=window.Zepto,nn(window,!0),nn(Element&&Element.prototype),nn(NodeList&&NodeList.prototype),nn(HTMLCollection&&HTMLCollection.prototype),nn(on,!0),nn(on&&on.fn),nn(an,!0),nn(an&&an.fn));for(var sn in rn)!function(t){if(rn.hasOwnProperty(t))switch(void 0===t?"undefined":W(t)){case"number":case"boolean":A(ln,t,{get:function(){return rn[t]},set:function(e){rn[t]=e}},!0);break;default:A(ln,t,rn[t],!0)}}(sn);return Object.freeze(ln),ln});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
